// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query_posts.sql

package sqlc

import (
	"context"
	"time"

	uuid "github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
insert into full_example.posts (
    user_id, title, content, published
) values (
    $1, $2, $3, $4
)
returning id, user_id, title, content, published, created_at, updated_at
`

type CreatePostParams struct {
	UserID    uuid.UUID `db:"user_id" json:"userId"`
	Title     string    `db:"title" json:"title"`
	Content   string    `db:"content" json:"content"`
	Published bool      `db:"published" json:"published"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (FullExamplePost, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Published,
	)
	var i FullExamplePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
delete from full_example.posts
where id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPostByID = `-- name: GetPostByID :one

select id, user_id, title, content, published, created_at, updated_at from full_example.posts
where id = $1 limit 1
`

// Post management queries
func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (FullExamplePost, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i FullExamplePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
select id, user_id, title, content, published, created_at, updated_at from full_example.posts
order by created_at desc
`

func (q *Queries) ListPosts(ctx context.Context) ([]FullExamplePost, error) {
	rows, err := q.db.Query(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FullExamplePost
	for rows.Next() {
		var i FullExamplePost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUser = `-- name: ListPostsByUser :many
select id, user_id, title, content, published, created_at, updated_at from full_example.posts
where user_id = $1
order by created_at desc
`

func (q *Queries) ListPostsByUser(ctx context.Context, userID uuid.UUID) ([]FullExamplePost, error) {
	rows, err := q.db.Query(ctx, listPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FullExamplePost
	for rows.Next() {
		var i FullExamplePost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsWithUsers = `-- name: ListPostsWithUsers :many
select 
    p.id,
    p.title,
    p.content,
    p.published,
    p.created_at,
    p.updated_at,
    u.name as author_name,
    u.email as author_email
from full_example.posts p
join full_example.users u on u.id = p.user_id
where p.published = true
order by p.created_at desc
`

type ListPostsWithUsersRow struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Title       string    `db:"title" json:"title"`
	Content     string    `db:"content" json:"content"`
	Published   bool      `db:"published" json:"published"`
	CreatedAt   time.Time `db:"created_at" json:"createdAt"`
	UpdatedAt   time.Time `db:"updated_at" json:"updatedAt"`
	AuthorName  string    `db:"author_name" json:"authorName"`
	AuthorEmail string    `db:"author_email" json:"authorEmail"`
}

func (q *Queries) ListPostsWithUsers(ctx context.Context) ([]ListPostsWithUsersRow, error) {
	rows, err := q.db.Query(ctx, listPostsWithUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsWithUsersRow
	for rows.Next() {
		var i ListPostsWithUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AuthorName,
			&i.AuthorEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedPosts = `-- name: ListPublishedPosts :many
select id, user_id, title, content, published, created_at, updated_at from full_example.posts
where published = true
order by created_at desc
`

func (q *Queries) ListPublishedPosts(ctx context.Context) ([]FullExamplePost, error) {
	rows, err := q.db.Query(ctx, listPublishedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FullExamplePost
	for rows.Next() {
		var i FullExamplePost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Published,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPost = `-- name: PublishPost :one
update full_example.posts
set 
    published = true,
    updated_at = now()
where id = $1
returning id, user_id, title, content, published, created_at, updated_at
`

func (q *Queries) PublishPost(ctx context.Context, id uuid.UUID) (FullExamplePost, error) {
	row := q.db.QueryRow(ctx, publishPost, id)
	var i FullExamplePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
update full_example.posts
set 
    title = $2,
    content = $3,
    published = $4,
    updated_at = now()
where id = $1
returning id, user_id, title, content, published, created_at, updated_at
`

type UpdatePostParams struct {
	ID        uuid.UUID `db:"id" json:"id"`
	Title     string    `db:"title" json:"title"`
	Content   string    `db:"content" json:"content"`
	Published bool      `db:"published" json:"published"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (FullExamplePost, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Published,
	)
	var i FullExamplePost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Published,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
